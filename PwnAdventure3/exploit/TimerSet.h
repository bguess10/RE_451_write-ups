class TimerSet {
  
  struct TimerEvent {
    float timeLeft;
    float initialTime;
    bool recurring;
    bool withContext;
    std::function<void ()> callback;
    std::function<void (Actor *)> contextCallback;
  };

  private:
    std::map<std::string, TimerSet::TimerEvent> m_timers;

  public:
    void Add(const std::string &, float, const std::function<void ()> &);
    void AddWithContext(const std::string &, float, const std::function<void (Actor *)> &);
    void AddRecurring(const std::string &, float, const std::function<void ()> &);
    void AddRecurringWithContext(const std::string &, float, const std::function<void (Actor *)> &);
    void Cancel(const std::string &);
    void Clear(void);
    void Tick(Actor *, float);
};