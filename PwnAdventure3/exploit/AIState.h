class AIState {
  protected:
    class AIActor *m_owner;
    class TimerSet m_timers;

  public:
    AIState(class AIActor *);
    virtual ~AIState();
    class AIActor * GetOwner() const;
    class Actor * GetTarget() const;
    virtual void EnterState(class Actor *);
    virtual void LeaveState();
    virtual void Tick(float);
    virtual void OnAIMoveComplete();
    void AddTimer(const std::string &, float, const class std::function<void ()> &);
    void AddTimerWithContext(const std::string &, float, const class std::function<void (Actor *)> &);
    void AddRecurringTimer(const std::string &, float, const class std::function<void ()> &);
    void AddRecurringTimerWithContext(const std::string &, float, const class std::function<void (Actor *)> &);
    void CancelTimer(const std::string &);
    void CancelAllTimers();
};