#include "pch.h"
#include <string.h>

bool print_all_players = false;
bool print_all_actors = false;
bool b_hold_position = false;
Vector3 v_hold_position;
bool b_rotation = false;
Rotation v_rotation;
Player* me;
bool b_hold_z = false;
float v_last_z = 0.0;
bool b_do_chat = false;
std::string chatmsg;

World* GameWorld;
GameAPI* Game;

float Player::GetJumpSpeed() {
  return 2000.0;
}

float Player::GetSprintMultiplier(void) {
  return 200.0;
}

void Player::Chat(const char * str) {
  Vector3 position = this->GetPosition();
  v_hold_position = position;
  me = this;
  if (str[0] == '!') {
    position.z = 0;
    this->SetPosition(position);
  }
  else if (str[0] == '@') {
    const char * start1 = str + 2;
    const char * start2 = strchr(start1, ' ');
    const char * start3 = strchr(start2+1, ' ');

    float x = atof(start1);
    float y = atof(start2);
    float z = atof(start3);

    printf("Location %f %f %f\r\n", x,y,z);

    Vector3 new_pos = position;
    new_pos.x = x;
    new_pos.y = y;
    new_pos.z = z;
    v_hold_position = new_pos;
    this->SetPosition(new_pos);
  }

  else if (str[0] == '%') {
    printf("Current Position: %f %f %f\r\n", position.x, position.y, position.z);
  }

  else if(str[0] == 'A') {
    print_all_actors = true;
  }
  else if (str[0] == 'H') {
    b_hold_position = true;
    v_hold_position = position;
  }
  else if (str[0] == 'h') {
    b_hold_position = false;
  }
  else if (str[0] == 'D') {
    position.z -= 100;
    v_hold_position = position;
  } 
  else if (str[0]=='Q') {
    position.z = 0;
    this->SetPosition(position);
    v_last_z = position.z;
    b_hold_z = true;
  }
  else if (str[0] == 'q') {
    b_hold_z = false;
  }


  b_do_chat = true;
  chatmsg = std::string(str);
}

void World::Tick(float deltaT) {
  if (print_all_actors) {
    print_all_actors = false;

    for (const ActorRef<IActor>& actor_ref: this->m_actors) {
      Actor* actor = (Actor*)actor_ref.Get();
      Vector3 position = actor->GetPosition();
      const char* name = actor->GetDisplayName();
      printf("Name: %s | Position: @ %f %f %f\r\n", name, position.x, position.y, position.z); 
    }
  }

  if (b_hold_position) {
    me->SetPosition(v_hold_position);
  }

  if (print_all_players) {
    print_all_players = false;

    for (const ActorRef<IPlayer>& actor_ref: this->m_players) {
      IPlayer* player = (IPlayer*)actor_ref.Get();
      ILocalPlayer* ilp = player->GetLocalPlayer();
      printf("%d\r\n", ilp);
      // Vector3 position = ilp->GetPosition();
      // printf("Position: @ %f %f %f\r\n", position.x, position.y, position.z); 
    }
  }
  if (b_hold_z) {
    
    // Vector3 stuff = me->GetPosition();
    // v_last_z = std::max(stuff.z, v_last_z);
    // if (!me->GetJumpState()) {
    //   stuff.z = v_last_z;
    //   me->SetPosition(stuff);
    // }
  }
  if (b_do_chat){
    this->Chat(me, chatmsg);
    b_do_chat = false;
  }
}