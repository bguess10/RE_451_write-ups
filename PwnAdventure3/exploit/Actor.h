#include <string>


class Actor : public IActor {
  protected:
    size_t m_refs;
    uint32_t m_id;
    IUE4Actor *m_target;
    TimerSet *m_timers;
    std::string m_blueprintName;
    ActorRef<IActor> m_owner;
    int32_t m_health;
    std::map<std::string, bool> m_states;
    float m_forwardMovementFraction;
    float m_strafeMovementFraction;
    Vector3 m_remotePosition;
    Vector3 m_remoteVelocity;
    Rotation m_remoteRotation;
    float m_remoteLocationBlendFactor;
    Spawner *m_spawner;

    virtual void OnKilled(IActor *, IItem *);
    virtual void OnTargetKilled(IActor *, IItem *);
  public:
    Actor(const std::string &);
    virtual ~Actor(void);
    virtual bool IsValid(void) const;
    virtual void * GetUE4Actor(void);
    virtual void AddRef(void);
    virtual void Release(void);
    void RemoveFromWorld(void);
    virtual void OnSpawnActor(IUE4Actor *);
    virtual void OnDestroyActor(void);
    virtual std::string GetDeathMessage(void);
    virtual const char * GetBlueprintName(void);
    virtual bool IsCharacter(void);
    virtual bool IsNPC(void);
    virtual bool IsProjectile(void);
    virtual bool IsPlayer(void);
    virtual IPlayer * GetPlayerInterface(void);
    virtual bool ShouldSendPositionUpdates(void);
    virtual bool ShouldReceivePositionUpdates(void);
    uint32_t GetId(void) const;
    void SetId(uint32_t);
    Vector3 GetPosition(void);
    Vector3 GetProjectilePosition(void);
    virtual Vector3 GetLookPosition(void);
    Rotation GetRotation(void);
    virtual Rotation GetLookRotation(void);
    Vector3 GetVelocity(void);
    float GetForwardMovementFraction(void) const;
    float GetStrafeMovementFraction(void) const;
    bool IsOnGround(void);
    void SetPosition(const Vector3 &);
    void SetRotation(const Rotation &);
    void SetVelocity(const Vector3 &);
    void SetForwardAndStrafeMovement(float, float);
    void SetRemotePositionAndRotation(const Vector3 &, const Rotation &);
    void InterpolateRemotePosition(float);
    virtual IActor * GetOwner(void);
    void LocalRespawn(const Vector3 &, const Rotation &);
    bool MoveToLocation(const Vector3 &);
    bool MoveToRandomLocationInRadius(float);
    bool MoveToActor(IActor *);
    bool GetState(const std::string &);
    virtual void UpdateState(const std::string &, bool);
    virtual void TriggerEvent(const std::string &, IActor *, bool);
    const std::map<std::string, bool> & GetStates(void);
    IActor * LineTraceTo(const Vector3 &);
    void FireBullets(IItem *, int32_t, DamageType, float, uint32_t, float);
    void FireBullets(IItem *, int32_t, DamageType, const Vector3 &, float, uint32_t, float);
    virtual bool CanBeDamaged(IActor *);
    virtual float GetMaximumDamageDistance(void);
    virtual int32_t GetHealth(void);
    virtual int32_t GetMaxHealth(void);
    virtual void Damage(IActor *, IItem *, int32_t, DamageType);
    void PerformSetHealth(int32_t);
    virtual void Tick(float);
    virtual bool CanUse(IPlayer *);
    virtual void OnUse(IPlayer *);
    virtual void PerformUse(IPlayer *);
    virtual void OnHit(IActor *, const Vector3 &, const Vector3 &);
    virtual void OnAIMoveComplete(void);
    virtual const char * GetDisplayName(void);
    virtual bool IsElite(void);
    virtual bool IsPvPEnabled(void);
    virtual IItem ** GetShopItems(size_t &);
    virtual std::vector<IItem*> GetShopItems(void);
    virtual void FreeShopItems(IItem **);
    virtual std::vector<IItem*> GetValidBuyItems(void);
    virtual float GetShopBuyPriceMultiplier(void);
    virtual float GetShopSellPriceMultiplier(void);
    virtual int32_t GetBuyPriceForItem(IItem *);
    virtual int32_t GetSellPriceForItem(IItem *);
    void SetSpawner(Spawner *);
    void AddTimer(const std::string &, float, const std::function<void ()> &);
    void AddTimerWithContext(const std::string &, float, const std::function<void (Actor *)> &);
    void AddRecurringTimer(const std::string &, float, const std::function<void ()> &);
    void AddRecurringTimerWithContext(const std::string &, float, const std::function<void (Actor *)> &);
    void CancelTimer(const std::string &);
    void PerformReloadNotification(uint32_t);
};